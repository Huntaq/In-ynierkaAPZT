{"ast":null,"code":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst mysql = require('mysql2');\nconst app = express();\n\n// Middleware\napp.use(bodyParser.json());\napp.use(cors());\n\n// Create a connection to the database\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  // zmień na swoje użytkownika bazy danych\n  password: '',\n  // zmień na swoje hasło do bazy danych\n  database: 'mydatabase'\n});\n\n// Connect to the database\nconnection.connect(error => {\n  if (error) {\n    console.error('Database connection failed:', error.stack);\n    return;\n  }\n  console.log('Connected to the database.');\n});\n\n// API routes\napp.get('/api/items', (req, res) => {\n  connection.query('SELECT * FROM items', (error, results) => {\n    if (error) throw error;\n    res.json(results);\n  });\n});\napp.post('/api/items', (req, res) => {\n  const {\n    name,\n    quantity\n  } = req.body;\n  connection.query('INSERT INTO items (name, quantity) VALUES (?, ?)', [name, quantity], (error, results) => {\n    if (error) throw error;\n    res.json({\n      id: results.insertId,\n      name,\n      quantity\n    });\n  });\n});\n\n// Start the server\nconst port = 5000;\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});","map":{"version":3,"names":["express","require","bodyParser","cors","mysql","app","use","json","connection","createConnection","host","user","password","database","connect","error","console","stack","log","get","req","res","query","results","post","name","quantity","body","id","insertId","port","listen"],"sources":["C:/React/db-test/client/src/App.js"],"sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst mysql = require('mysql2');\n\nconst app = express();\n\n// Middleware\napp.use(bodyParser.json());\napp.use(cors());\n\n// Create a connection to the database\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root', // zmień na swoje użytkownika bazy danych\n  password: '', // zmień na swoje hasło do bazy danych\n  database: 'mydatabase'\n});\n\n// Connect to the database\nconnection.connect(error => {\n  if (error) {\n    console.error('Database connection failed:', error.stack);\n    return;\n  }\n  console.log('Connected to the database.');\n});\n\n// API routes\napp.get('/api/items', (req, res) => {\n  connection.query('SELECT * FROM items', (error, results) => {\n    if (error) throw error;\n    res.json(results);\n  });\n});\n\napp.post('/api/items', (req, res) => {\n  const { name, quantity } = req.body;\n  connection.query('INSERT INTO items (name, quantity) VALUES (?, ?)', [name, quantity], (error, results) => {\n    if (error) throw error;\n    res.json({ id: results.insertId, name, quantity });\n  });\n});\n\n// Start the server\nconst port = 5000;\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,KAAK,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAE/B,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;;AAErB;AACAK,GAAG,CAACC,GAAG,CAACJ,UAAU,CAACK,IAAI,CAAC,CAAC,CAAC;AAC1BF,GAAG,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;;AAEf;AACA,MAAMK,UAAU,GAAGJ,KAAK,CAACK,gBAAgB,CAAC;EACxCC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,MAAM;EAAE;EACdC,QAAQ,EAAE,EAAE;EAAE;EACdC,QAAQ,EAAE;AACZ,CAAC,CAAC;;AAEF;AACAL,UAAU,CAACM,OAAO,CAACC,KAAK,IAAI;EAC1B,IAAIA,KAAK,EAAE;IACTC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACE,KAAK,CAAC;IACzD;EACF;EACAD,OAAO,CAACE,GAAG,CAAC,4BAA4B,CAAC;AAC3C,CAAC,CAAC;;AAEF;AACAb,GAAG,CAACc,GAAG,CAAC,YAAY,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAClCb,UAAU,CAACc,KAAK,CAAC,qBAAqB,EAAE,CAACP,KAAK,EAAEQ,OAAO,KAAK;IAC1D,IAAIR,KAAK,EAAE,MAAMA,KAAK;IACtBM,GAAG,CAACd,IAAI,CAACgB,OAAO,CAAC;EACnB,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFlB,GAAG,CAACmB,IAAI,CAAC,YAAY,EAAE,CAACJ,GAAG,EAAEC,GAAG,KAAK;EACnC,MAAM;IAAEI,IAAI;IAAEC;EAAS,CAAC,GAAGN,GAAG,CAACO,IAAI;EACnCnB,UAAU,CAACc,KAAK,CAAC,kDAAkD,EAAE,CAACG,IAAI,EAAEC,QAAQ,CAAC,EAAE,CAACX,KAAK,EAAEQ,OAAO,KAAK;IACzG,IAAIR,KAAK,EAAE,MAAMA,KAAK;IACtBM,GAAG,CAACd,IAAI,CAAC;MAAEqB,EAAE,EAAEL,OAAO,CAACM,QAAQ;MAAEJ,IAAI;MAAEC;IAAS,CAAC,CAAC;EACpD,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMI,IAAI,GAAG,IAAI;AACjBzB,GAAG,CAAC0B,MAAM,CAACD,IAAI,EAAE,MAAM;EACrBd,OAAO,CAACE,GAAG,CAAC,0BAA0BY,IAAI,EAAE,CAAC;AAC/C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}